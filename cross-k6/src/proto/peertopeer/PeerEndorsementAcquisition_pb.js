/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.Claim', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.Ready', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    claim: (f = msg.getClaim()) && proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.toObject(includeInstance, f),
    proversignature: msg.getProversignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pt.ulisboa.tecnico.cross.peertopeer.Claim;
      reader.readMessage(value,proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.deserializeBinaryFromReader);
      msg.setClaim(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProversignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaim();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.serializeBinaryToWriter
    );
  }
  f = message.getProversignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Claim claim = 1;
 * @return {?proto.pt.ulisboa.tecnico.cross.peertopeer.Claim}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.getClaim = function() {
  return /** @type{?proto.pt.ulisboa.tecnico.cross.peertopeer.Claim} */ (
    jspb.Message.getWrapperField(this, proto.pt.ulisboa.tecnico.cross.peertopeer.Claim, 1));
};


/** @param {?proto.pt.ulisboa.tecnico.cross.peertopeer.Claim|undefined} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.setClaim = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.clearClaim = function() {
  this.setClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.hasClaim = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proverSignature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.getProversignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proverSignature = 2;
 * This is a type-conversion wrapper around `getProversignature()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.getProversignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProversignature()));
};


/**
 * optional bytes proverSignature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProversignature()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.getProversignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProversignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.prototype.setProversignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.Claim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.Claim';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Claim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.toObject = function(includeInstance, msg) {
  var f, obj = {
    proverid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proversessionid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    poiid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    va: msg.getVa_asB64(),
    vb: msg.getVb_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Claim}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.Claim;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Claim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Claim}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProverid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProversessionid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoiid(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVa(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Claim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProverid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProversessionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPoiid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getVa_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getVb_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string proverId = 1;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getProverid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.setProverid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string proverSessionId = 2;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getProversessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.setProversessionid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string poiId = 3;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getPoiid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.setPoiid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes vA = 5;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getVa = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes vA = 5;
 * This is a type-conversion wrapper around `getVa()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getVa_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVa()));
};


/**
 * optional bytes vA = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVa()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getVa_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVa()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.setVa = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes vB = 6;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getVb = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes vB = 6;
 * This is a type-conversion wrapper around `getVb()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getVb_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVb()));
};


/**
 * optional bytes vB = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVb()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.getVb_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVb()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Claim.prototype.setVb = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.toObject = function(includeInstance, msg) {
  var f, obj = {
    vh: msg.getVh_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVh_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes vH = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.prototype.getVh = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes vH = 1;
 * This is a type-conversion wrapper around `getVh()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.prototype.getVh_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVh()));
};


/**
 * optional bytes vH = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVh()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.prototype.getVh_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVh()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Prepare.prototype.setVh = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Ready = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.Ready, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.Ready';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Ready} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Ready}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.Ready;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Ready} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Ready}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Ready} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Ready.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.toObject = function(includeInstance, msg) {
  var f, obj = {
    vci: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVci(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVci();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool vCi = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.prototype.getVci = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Challenge.prototype.setVci = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    vri: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVri();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool vRi = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.prototype.getVri = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.ChallengeResponse.prototype.setVri = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedclaim: (f = msg.getSignedclaim()) && proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.toObject(includeInstance, f),
    encryptedsignedendorsement: msg.getEncryptedsignedendorsement_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim;
      reader.readMessage(value,proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.deserializeBinaryFromReader);
      msg.setSignedclaim(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedsignedendorsement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedclaim();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim.serializeBinaryToWriter
    );
  }
  f = message.getEncryptedsignedendorsement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional SignedClaim signedClaim = 1;
 * @return {?proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.getSignedclaim = function() {
  return /** @type{?proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim} */ (
    jspb.Message.getWrapperField(this, proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim, 1));
};


/** @param {?proto.pt.ulisboa.tecnico.cross.peertopeer.SignedClaim|undefined} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.setSignedclaim = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.clearSignedclaim = function() {
  this.setSignedclaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.hasSignedclaim = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes encryptedSignedEndorsement = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.getEncryptedsignedendorsement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes encryptedSignedEndorsement = 2;
 * This is a type-conversion wrapper around `getEncryptedsignedendorsement()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.getEncryptedsignedendorsement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedsignedendorsement()));
};


/**
 * optional bytes encryptedSignedEndorsement = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedsignedendorsement()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.getEncryptedsignedendorsement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedsignedendorsement()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.PeerEndorsement.prototype.setEncryptedsignedendorsement = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.toObject = function(includeInstance, msg) {
  var f, obj = {
    endorsement: (f = msg.getEndorsement()) && proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.toObject(includeInstance, f),
    witnesssignature: msg.getWitnesssignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement;
      reader.readMessage(value,proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.deserializeBinaryFromReader);
      msg.setEndorsement(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWitnesssignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndorsement();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.serializeBinaryToWriter
    );
  }
  f = message.getWitnesssignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Endorsement endorsement = 1;
 * @return {?proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.getEndorsement = function() {
  return /** @type{?proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement} */ (
    jspb.Message.getWrapperField(this, proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement, 1));
};


/** @param {?proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement|undefined} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.setEndorsement = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.clearEndorsement = function() {
  this.setEndorsement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.hasEndorsement = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes witnessSignature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.getWitnesssignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes witnessSignature = 2;
 * This is a type-conversion wrapper around `getWitnesssignature()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.getWitnesssignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWitnesssignature()));
};


/**
 * optional bytes witnessSignature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWitnesssignature()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.getWitnesssignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWitnesssignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.SignedEndorsement.prototype.setWitnesssignature = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.displayName = 'proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.toObject = function(includeInstance, msg) {
  var f, obj = {
    witnessid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    witnesssessionid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    poiid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    vh: msg.getVh_asB64(),
    vc: msg.getVc_asB64(),
    vr: msg.getVr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement;
  return proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWitnessid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWitnesssessionid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoiid(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVh(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVc(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWitnessid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWitnesssessionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPoiid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getVh_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getVc_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getVr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string witnessId = 1;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getWitnessid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.setWitnessid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string witnessSessionId = 2;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getWitnesssessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.setWitnesssessionid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string poiId = 3;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getPoiid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.setPoiid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes vH = 5;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVh = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes vH = 5;
 * This is a type-conversion wrapper around `getVh()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVh_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVh()));
};


/**
 * optional bytes vH = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVh()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVh_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVh()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.setVh = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes vC = 6;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVc = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes vC = 6;
 * This is a type-conversion wrapper around `getVc()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVc_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVc()));
};


/**
 * optional bytes vC = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVc()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVc_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVc()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.setVc = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes vR = 7;
 * @return {!(string|Uint8Array)}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes vR = 7;
 * This is a type-conversion wrapper around `getVr()`
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVr()));
};


/**
 * optional bytes vR = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVr()`
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.getVr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVr()));
};


/** @param {!(string|Uint8Array)} value */
proto.pt.ulisboa.tecnico.cross.peertopeer.Endorsement.prototype.setVr = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


goog.object.extend(exports, proto.pt.ulisboa.tecnico.cross.peertopeer);
