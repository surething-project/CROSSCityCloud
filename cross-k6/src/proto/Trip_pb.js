/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var Evidence_pb = require('./Evidence_pb.js');
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.contract.Trip', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.contract.Visit', null, global);
goog.exportSymbol('proto.pt.ulisboa.tecnico.cross.contract.VisitVerificationStatus', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pt.ulisboa.tecnico.cross.contract.Trip.repeatedFields_, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.contract.Trip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.contract.Trip.displayName = 'proto.pt.ulisboa.tecnico.cross.contract.Trip';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.contract.Trip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.Trip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    routeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    completed: jspb.Message.getFieldWithDefault(msg, 3, false),
    visitsList: jspb.Message.toObjectList(msg.getVisitsList(),
    proto.pt.ulisboa.tecnico.cross.contract.Visit.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.Trip}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.contract.Trip;
  return proto.pt.ulisboa.tecnico.cross.contract.Trip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.Trip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.Trip}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleted(value);
      break;
    case 4:
      var value = new proto.pt.ulisboa.tecnico.cross.contract.Visit;
      reader.readMessage(value,proto.pt.ulisboa.tecnico.cross.contract.Visit.deserializeBinaryFromReader);
      msg.addVisits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.contract.Trip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.Trip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRouteid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompleted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getVisitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pt.ulisboa.tecnico.cross.contract.Visit.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string routeId = 2;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.getRouteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.setRouteid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool completed = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.getCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.setCompleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated Visit visits = 4;
 * @return {!Array<!proto.pt.ulisboa.tecnico.cross.contract.Visit>}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.getVisitsList = function() {
  return /** @type{!Array<!proto.pt.ulisboa.tecnico.cross.contract.Visit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pt.ulisboa.tecnico.cross.contract.Visit, 4));
};


/** @param {!Array<!proto.pt.ulisboa.tecnico.cross.contract.Visit>} value */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.setVisitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.Visit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.Visit}
 */
proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.addVisits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pt.ulisboa.tecnico.cross.contract.Visit, opt_index);
};


proto.pt.ulisboa.tecnico.cross.contract.Trip.prototype.clearVisitsList = function() {
  this.setVisitsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pt.ulisboa.tecnico.cross.contract.Visit.repeatedFields_, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.contract.Visit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.contract.Visit.displayName = 'proto.pt.ulisboa.tecnico.cross.contract.Visit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.contract.Visit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.Visit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    poiid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entrytime: (f = msg.getEntrytime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    leavetime: (f = msg.getLeavetime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    visitevidencesList: jspb.Message.toObjectList(msg.getVisitevidencesList(),
    Evidence_pb.VisitEvidence.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.Visit}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.contract.Visit;
  return proto.pt.ulisboa.tecnico.cross.contract.Visit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.Visit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.Visit}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoiid(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEntrytime(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLeavetime(value);
      break;
    case 5:
      var value = new Evidence_pb.VisitEvidence;
      reader.readMessage(value,Evidence_pb.VisitEvidence.deserializeBinaryFromReader);
      msg.addVisitevidences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.contract.Visit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.Visit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPoiid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntrytime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLeavetime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getVisitevidencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      Evidence_pb.VisitEvidence.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string poiId = 2;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.getPoiid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.setPoiid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp entryTime = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.getEntrytime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.setEntrytime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.clearEntrytime = function() {
  this.setEntrytime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.hasEntrytime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp leaveTime = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.getLeavetime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.setLeavetime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.clearLeavetime = function() {
  this.setLeavetime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.hasLeavetime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated VisitEvidence visitEvidences = 5;
 * @return {!Array<!proto.pt.ulisboa.tecnico.cross.contract.VisitEvidence>}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.getVisitevidencesList = function() {
  return /** @type{!Array<!proto.pt.ulisboa.tecnico.cross.contract.VisitEvidence>} */ (
    jspb.Message.getRepeatedWrapperField(this, Evidence_pb.VisitEvidence, 5));
};


/** @param {!Array<!proto.pt.ulisboa.tecnico.cross.contract.VisitEvidence>} value */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.setVisitevidencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.VisitEvidence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.VisitEvidence}
 */
proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.addVisitevidences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pt.ulisboa.tecnico.cross.contract.VisitEvidence, opt_index);
};


proto.pt.ulisboa.tecnico.cross.contract.Visit.prototype.clearVisitevidencesList = function() {
  this.setVisitevidencesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.repeatedFields_, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.displayName = 'proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tripsList: jspb.Message.toObjectList(msg.getTripsList(),
    proto.pt.ulisboa.tecnico.cross.contract.Trip.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse;
  return proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pt.ulisboa.tecnico.cross.contract.Trip;
      reader.readMessage(value,proto.pt.ulisboa.tecnico.cross.contract.Trip.deserializeBinaryFromReader);
      msg.addTrips(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTripsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pt.ulisboa.tecnico.cross.contract.Trip.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Trip trips = 1;
 * @return {!Array<!proto.pt.ulisboa.tecnico.cross.contract.Trip>}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.prototype.getTripsList = function() {
  return /** @type{!Array<!proto.pt.ulisboa.tecnico.cross.contract.Trip>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pt.ulisboa.tecnico.cross.contract.Trip, 1));
};


/** @param {!Array<!proto.pt.ulisboa.tecnico.cross.contract.Trip>} value */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.prototype.setTripsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.Trip=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.Trip}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.prototype.addTrips = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pt.ulisboa.tecnico.cross.contract.Trip, opt_index);
};


proto.pt.ulisboa.tecnico.cross.contract.GetTripsResponse.prototype.clearTripsList = function() {
  this.setTripsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.displayName = 'proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    visitverificationstatusMap: (f = msg.getVisitverificationstatusMap()) ? f.toObject(includeInstance, undefined) : [],
    completedtrip: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse}
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse;
  return proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse}
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getVisitverificationstatusMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "");
         });
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompletedtrip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisitverificationstatusMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getCompletedtrip();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * map<string, VisitVerificationStatus> visitVerificationStatus = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.pt.ulisboa.tecnico.cross.contract.VisitVerificationStatus>}
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.prototype.getVisitverificationstatusMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.pt.ulisboa.tecnico.cross.contract.VisitVerificationStatus>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.prototype.clearVisitverificationstatusMap = function() {
  this.getVisitverificationstatusMap().clear();
};


/**
 * optional bool completedTrip = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.prototype.getCompletedtrip = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.pt.ulisboa.tecnico.cross.contract.CreateOrUpdateTripResponse.prototype.setCompletedtrip = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.displayName = 'proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest;
  return proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pt.ulisboa.tecnico.cross.contract.GetTripRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.pt.ulisboa.tecnico.cross.contract.VisitVerificationStatus = {
  OK: 0,
  SHORT_DURATION: 1,
  NOT_ENOUGH_CONFIDENCE: 2
};

goog.object.extend(exports, proto.pt.ulisboa.tecnico.cross.contract);
